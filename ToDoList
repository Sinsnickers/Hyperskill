from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, Date
from datetime import datetime, timedelta
from sqlalchemy.orm import sessionmaker

engine = create_engine("sqlite:///todo.db?check_same_thread=False")
Base = declarative_base()

class Todo_list(Base):
    __tablename__ = 'task'
    id = Column(Integer, primary_key=True)
    task = Column(String, default="default_value")
    deadline = Column(Date, default=datetime.today())

    def __repr__(self):
        return self.task

Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)
session = Session()

def define_weekday(day):
    if day == 0:
        return "Monday"
    elif day == 1:
        return "Tuesday"
    elif day == 2:
        return "Wednesday"
    elif day == 3:
        return "Thursday"
    elif day == 4:
        return "Friday"
    elif day == 5:
        return "Saturday"
    elif day == 6:
        return "Sunday"


def print_today_tasks():
    tasks = session.query(Todo_list).filter(Todo_list.deadline == datetime.today().date()).all()
    print()
    if len(tasks) == 0:
        print(f"Today {datetime.today().day} {datetime.today().strftime('%b')}:")
        print("Nothing to do!")
    else:
        print(f"Today {datetime.today().day} {datetime.today().strftime('%b')}:")
        for task in tasks:
            print(task)

def print_week_tasks():
    today = datetime.today()
    for i in range(7):
        tasks = session.query(Todo_list).filter(Todo_list.deadline == (today.date() + timedelta(days=i))).all()
        print()
        if len(tasks) == 0:
            day = (datetime.today() + timedelta(days=i))
            weekday = (today + timedelta(days=i)).weekday()
            print(f"{define_weekday(weekday)} {day.day} {day.strftime('%b')}:")
            print("Nothing to do!")
        else:
            day = (datetime.today() + timedelta(days=i))
            weekday = (today + timedelta(days=i)).weekday()
            print(f"{define_weekday(weekday)} {day.day} {day.strftime('%b')}:")
            for task in tasks:
                print(task)

def print_all_tasks():
    today = datetime.today()
    tasks = session.query(Todo_list).order_by(Todo_list.deadline).all()
    print()
    if len(tasks) == 0:
        print("Nothing to do!")
    else:
        print("All tasks")
        for task in tasks:
            print(f"{task}. {task.deadline.day} {task.deadline.strftime('%b')}")
    print()


def add_task():
    user_task = input("Enter task\n")
    new_task = Todo_list(task=user_task,
                         deadline=datetime.strptime(input("Enter deadline\n"), "%Y-%m-%d"))
    session.add(new_task)
    session.commit()
    print("The task has been added!")

def missed_tasks():
    today = datetime.today()
    print("Missed tasks:")
    missed_tasks = session.query(Todo_list).filter(Todo_list.deadline < today.today())
    if missed_tasks == None:
        print("Nothing is missed!")
    else:
        for task in missed_tasks:
            print(f"{task}. {task.deadline.day} {task.deadline.strftime('%b')}")
    print()

def delete_tasks():
    today = datetime.today()
    missed_tasks = session.query(Todo_list).filter(Todo_list.deadline < today.today())
    for i, task in enumerate(missed_tasks):
        print(f"{i+1}) {task}. {task.deadline.day} {task.deadline.strftime('%b')}")
    deletable_tasks = input("Choose the number of the task you want to delete:\n")
    for i, task in enumerate(missed_tasks):
        if deletable_tasks == str(i+1):
            session.delete(task)
            session.commit()
        else:
            pass
    print()



def menu():
    while(True):
        print("1) Today's tasks\n"
              "2) Week's tasks\n"
              "3) All tasks\n"
              "4) Missed tasks\n"
              "5) Add task\n"
              "6) Delete task\n"
              "0) Exit")

        user_input = input()
        if user_input == "1":
            print_today_tasks()
        elif user_input == "2":
            print_week_tasks()
        elif user_input == "3":
            pass
            print_all_tasks()
        elif user_input == "4":
            missed_tasks()
        elif user_input == "5":
            add_task()
        elif user_input == "6":
            delete_tasks()
        elif user_input == "0":
            print()
            print("Bye!")
            break
        else:
            pass


menu()
